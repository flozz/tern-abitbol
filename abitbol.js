"use strict";

var tern = require("tern/lib/tern");
var infer = require("tern/lib/infer");


// helpers

var _classUniqId = 0;

function _getUniqClassId() {
    _classUniqId += 1;
    return "AbitbolClass" + _classUniqId;
}

function _isPrivate(name) {
    return name.indexOf("_") === 0;
}

function _isGetter(name) {
    return name.indexOf("get") === 0 || name.indexOf("is") === 0 || name.indexOf("has") === 0;
}

function _isAbitbolSpecialProperty(name) {
    var specialProp = [
        "$extend", "$map", "$class",
        "$data", "$super",
        "$name", "$computedPropertyName",
        "__include__", "__classvars__", "__init__"
    ];
    return specialProp.indexOf(name) >= 0;
}

function _isJsPropertyToSkip(name) {
    var jsProp = [
        "constructor", "prototype"
    ];
    return jsProp.indexOf(name) >= 0;
}

function _getterToPropertyName(name) {
    var accessorNameLength = 3;
    if (name.indexOf("is") === 0) {
        accessorNameLength = 2;
    }
    var propName = name.slice(accessorNameLength, accessorNameLength + 1).toLowerCase();
    propName += name.slice(accessorNameLength + 1, name.length);
    return  propName;
}

function _propagateProperties(source, destination, getset) {
    var hidePrivate = false;  // TODO make this configurable

    source.forAllProps(function(prop, val, local) {
        if (!local) return;
        if (_isJsPropertyToSkip(prop)) return;
        if (_isAbitbolSpecialProperty(prop)) return;
        if (_isPrivate(prop) && hidePrivate) return;

        val.propagate(destination.defProp(prop));

        // autogenerated conmputed property
        if (!getset) return;
        if (_isGetter(prop)) {
            var propertyType = val.getType();
            var computedProperty = destination.defProp(_getterToPropertyName(prop));
            if (propertyType && propertyType.retval) {
                propertyType.retval.propagate(computedProperty);
            }
            // TODO propagate getter's doc
        }
    });
}


// basic class definition

var defs = {

    "!name": "abitbol",

    "!define": {
        "!known_modules": {
            "abitbol": {
                "!type": "Class"
            }
        },

    },

    "Class": {
        "!type": "fn(?) -> +Class",
        "$extend": {
            "!type": "fn(properties: ?) -> !custom:abitbolExtend",
            "!effects": ["custom abitbol_extend"]
        },
        "$class": {
            "!type": "Class"
        },
        "$map": {
            "!type": "Obj"
        },
        "prototype": {
            "$class": {
                "!type": "Class"
            },
            "$map": {
                "!type": "Obj"
            },
            "$data": {
                "!type": "Obj"
            },
            "$super": {
                "!type": "fn()"
            }
        }
    }

};


// plugin functions

infer.registerFunction("abitbolExtend", function(_self, args, argNodes) {
    var abitbolClass = new infer.Fn(_getUniqClassId(), new infer.AVal(), [], [], new infer.AVal());
    var abitbolClassPrototype = abitbolClass.getProp("prototype").getType();

    var parentClassProperties = _self.getProp("prototype").getType();
    var newProperties = args[0];

    // parent class static properties
    _propagateProperties(_self, abitbolClass, false);

    // parent class properties
    _propagateProperties(parentClassProperties, abitbolClassPrototype, false);

    // new class static properties (__classvars__)
    var classvarsProperties = newProperties.hasProp("__classvars__");
    if (classvarsProperties) {
        _propagateProperties(classvarsProperties, abitbolClass, false);
    }

    // new class mixin properties (__include__)
    var mixinArray = newProperties.hasProp("__include__");
    if (mixinArray) {
        var mixinProperties = mixinArray.getProp("<i>");
        _propagateProperties(mixinProperties, abitbolClassPrototype, true);
    }

    // new class properties / computed properties
    _propagateProperties(newProperties, abitbolClassPrototype, true);

    // new class constructor
    // TODO

    // abitbol special properties
    // $extend
    var extendProp = _self.getProp("$extend");
    extendProp.propagate(abitbolClass.defProp("$extend"));

    // abitbol $class
    abitbolClass.propagate(abitbolClass.defProp("$class"));
    abitbolClass.propagate(abitbolClassPrototype.defProp("$class"));

    // fill abitbol $map
    var mapStaticProp = abitbolClass.defProp("$map");
    mapStaticProp.addType(new infer.Obj(true, "$map"));
    var mapProp = abitbolClassPrototype.defProp("$map");
    mapProp.addType(new infer.Obj(true, "$map"));
    // TODO fill $map with introspection data

    // abitbol $data
    var dataProp = abitbolClassPrototype.defProp("$data");
    dataProp.addType(new infer.Obj(true, "$data"));

    // abitbol $super
    var superProp = abitbolClassPrototype.defProp("$super");
    superProp.addType(new infer.Fn("$super", new infer.AVal(), [], [], new infer.AVal()));

    return abitbolClass;
});

tern.registerPlugin("abitbol", function(server, options) {
    server.addDefs(defs);
});

